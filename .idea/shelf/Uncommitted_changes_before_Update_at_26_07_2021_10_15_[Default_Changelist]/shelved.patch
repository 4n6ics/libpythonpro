Index: ../pycrypto/margingTrading/marginTradingCalculation_GUI.py
===================================================================
diff --git a/../pycrypto/margingTrading/marginTradingCalculation_GUI.py b/../pycrypto/margingTrading/marginTradingCalculation_GUI.py
deleted file mode 100644
--- a/../pycrypto/margingTrading/marginTradingCalculation_GUI.py	(revision d49a771324cf054edd6f8ef2de5f0e7bff7ca69c)
+++ /dev/null	(revision d49a771324cf054edd6f8ef2de5f0e7bff7ca69c)
@@ -1,116 +0,0 @@
-'''
-    MarginTrading v1.0 - Gui Version
-
-    EN - Program used to calculate Margin Trading
-    BR - Programa para calcular Margin Trading
-
-'''
-import os
-
-
-class Margin_Trading_Calculation:
-
-    def __init__(self):
-        pass
-
-    def calculation(self, colateral, leverage, target, stop_loss):
-        borrowed_value = colateral * (leverage - 1)
-        trading_total_value = colateral + borrowed_value
-        liquidation_percentage = (100 / leverage) / 100
-        liquidation_value = (colateral * liquidation_percentage)
-        profit = trading_total_value * (target / 100)
-        loss = trading_total_value * (stop_loss / 100)
-        return borrowed_value, trading_total_value, liquidation_percentage, liquidation_value, profit, loss
-
-
-class Margin_Trading_Calculation_BR:
-
-    def __init__(self):
-        self.colateral = float(input('\nValor Colateral: '))
-        self.leverage = float(input('Alavancagem (x): '))
-        self.target = float(input('Alvo (%): '))
-        self.stop_loss = float(input('Stop (%): '))
-
-    def print_calculation_results_br(self, res):
-        os.system('cls')
-        print(f'\nValor Colateral: {self.colateral}')
-        print(f'Alavancagem (x): {self.leverage}')
-        print(f'\nValor do Emprestimo: {res[0]}')
-        print(f'Valor Total do Trade: {res[1]}')
-        print(f'Liquidacao (%): {round(res[2] * 100, 2)}')
-        print(f'Valor de Liquidacao: {round(res[3], 2)}')
-        print(f'Lucro: {round(res[4], 2)}')
-        print(f'Perda: {round(res[5], 2)}')
-
-
-class Margin_Trading_Calculation_EN:
-
-    def __init__(self):
-        self.colateral = float(input('\nColateral Value: '))
-        self.leverage = float(input('Leverage (x): '))
-        self.target = float(input('Target (%): '))
-        self.stop_loss = float(input('Stop Loss (%): '))
-
-    def print_calculation_results_en(self, res):
-        os.system('cls')
-        print(f'\nColateral Value: {self.colateral}')
-        print(f'Leverage: {self.leverage}')
-        print(f'Borrowed Value: {res[0]}')
-        print(f'Trading Total Value: {res[1]}')
-        print(f'Liquidation (%): {round(res[2] * 100, 2)}')
-        print(f'Liquidation Value: {round(res[3], 2)}')
-        print(f'Profit: {round(res[4], 2)}')
-        print(f'Loss: {round(res[5], 2)}')
-
-
-if __name__ == '__main__':
-
-    os.system('cls')
-    choice = 'S'
-
-    while choice == 'S' or choice == 'Y':
-        try:
-            language = int(input('(1) - Portugues\n(2) - English\n--> '))
-
-            if language == 1 or language == 2:
-                if language == 1:  # Portugues
-                    choice = 'S'
-                    while choice.upper() == 'S':
-                        mt_br = Margin_Trading_Calculation_BR()
-                        res = Margin_Trading_Calculation.calculation(None, mt_br.colateral, mt_br.leverage,
-                                                                     mt_br.target,
-                                                                     mt_br.stop_loss)
-                        mt_br.print_calculation_results_br(res)
-                        choice = str(input('\nCalcular novamente? (S) (N)\n--> '))
-                        os.system('cls')
-
-                        if choice.upper() == 'N':
-                            print('\nObrigado por usar o soft MarginTrading :)')
-                        elif choice.upper() == 'S':
-                            pass
-                        else:
-                            print('\nOpcao Invalida :(')
-
-                elif language == 2:
-                    choice = 'Y'
-                    while choice.upper() == 'Y':
-                        mt_en = Margin_Trading_Calculation_EN()
-                        res = Margin_Trading_Calculation.calculation(None, mt_en.colateral, mt_en.leverage,
-                                                                     mt_en.target,
-                                                                     mt_en.stop_loss)
-                        mt_en.print_calculation_results_en(res)
-                        choice = str(input('\nCalculate again? (Y) (N)\n--> '))
-                        os.system('cls')
-
-                        if choice.upper() == 'N':
-                            print('\nThanks for using MarginTrading :)')
-                        elif choice.upper() == 'Y':
-                            pass
-                        else:
-                            print('Invalid option :(')
-            else:
-                os.system('cls')
-                print('Opcao Invalida (Invalid option)\n')
-        except ValueError:
-            os.system('cls')
-            print('Opcao invalida. Por favor tente novamente.\n Invalid option. Please try again.\n')
Index: ../pycrypto/margingTrading/marginTradingCalculation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../pycrypto/margingTrading/marginTradingCalculation.py b/../pycrypto/margingTrading/marginTradingCalc.py
rename from ../pycrypto/margingTrading/marginTradingCalculation.py
rename to ../pycrypto/margingTrading/marginTradingCalc.py
--- a/../pycrypto/margingTrading/marginTradingCalculation.py	(revision d49a771324cf054edd6f8ef2de5f0e7bff7ca69c)
+++ b/../pycrypto/margingTrading/marginTradingCalc.py	(date 1627249288175)
@@ -1,5 +1,5 @@
 '''
-    MarginTrading v1.0
+    MarginTrading Calc v1.0
 
     EN - Program used to calculate Margin Trading
     BR - Programa para calcular Margin Trading
@@ -8,7 +8,7 @@
 import os
 
 
-class Margin_Trading_Calculation:
+class MarginTradingCalculation:
 
     def __init__(self):
         pass
@@ -23,7 +23,7 @@
         return borrowed_value, trading_total_value, liquidation_percentage, liquidation_value, profit, loss
 
 
-class Margin_Trading_Calculation_BR:
+class MarginTradingCalculationBR:
 
     def __init__(self):
         self.colateral = float(input('\nValor Colateral: '))
@@ -35,15 +35,15 @@
         os.system('cls')
         print(f'\nValor Colateral: {self.colateral}')
         print(f'Alavancagem (x): {self.leverage}')
-        print(f'\nValor do Emprestimo: {res[0]}')
+        print(f'\nValor do Empréstimo: {res[0]}')
         print(f'Valor Total do Trade: {res[1]}')
-        print(f'Liquidacao (%): {round(res[2] * 100, 2)}')
-        print(f'Valor de Liquidacao: {round(res[3], 2)}')
+        print(f'Liquidação (%): {round(res[2] * 100, 2)}')
+        print(f'Valor de Liquidação: {round(res[3], 2)}')
         print(f'Lucro: {round(res[4], 2)}')
-        print(f'Perda: {round(res[5], 2)}')
+        print(f'Prejuízo: {round(res[5], 2)}')
 
 
-class Margin_Trading_Calculation_EN:
+class MarginTradingCalculationEN:
 
     def __init__(self):
         self.colateral = float(input('\nColateral Value: '))
@@ -78,8 +78,8 @@
                     if language == 1:  # Portugues
                         choice = 'S'
                         while choice.upper() == 'S':
-                            mt_br = Margin_Trading_Calculation_BR()
-                            res = Margin_Trading_Calculation.calculation(None, mt_br.colateral, mt_br.leverage,
+                            mt_br = MarginTradingCalculationBR()
+                            res = MarginTradingCalculationEN.calculation(None, mt_br.colateral, mt_br.leverage,
                                                                          mt_br.target,
                                                                          mt_br.stop_loss)
                             mt_br.print_calculation_results_br(res)
@@ -96,8 +96,8 @@
                     elif language == 2:
                         choice = 'Y'
                         while choice.upper() == 'Y':
-                            mt_en = Margin_Trading_Calculation_EN()
-                            res = Margin_Trading_Calculation.calculation(None, mt_en.colateral, mt_en.leverage,
+                            mt_en = MarginTradingCalculationEN()
+                            res = MarginTradingCalculationEN.calculation(None, mt_en.colateral, mt_en.leverage,
                                                                          mt_en.target,
                                                                          mt_en.stop_loss)
                             mt_en.print_calculation_results_en(res)
Index: ../pycrypto/margingTrading/marginTradingCalculation_GUI_v1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../pycrypto/margingTrading/marginTradingCalculation_GUI_v1.py b/../pycrypto/margingTrading/marginTradingCalculation_GUI_v1.py
new file mode 100644
--- /dev/null	(date 1627087615355)
+++ b/../pycrypto/margingTrading/marginTradingCalculation_GUI_v1.py	(date 1627087615355)
@@ -0,0 +1,56 @@
+'''
+    MarginTrading Calc GUI - Tkinter
+'''
+from tkinter import *
+import tkinter as tk
+
+
+class MarginTradingCalcGui:
+
+    def __init__(self):
+        """
+            Window Builder
+        """
+        self.window = tk.Tk()
+        self.window.title('MarginTrading Calc v1')
+        self.window.configure(bg='black')
+        self.window.geometry('350x500')
+        self.window.resizable(FALSE, FALSE)
+
+    def text_labels(self):
+        """
+            Text Labels
+        :return:
+        """
+        frame_text_labels = tk.Frame(self.window)
+        colateral = tk.Label(frame_text_labels, text='Valor Colateral', width=15, bg='black', fg='#F0B90B', font='Gotham 13 bold')
+        alavancagem = tk.Label(frame_text_labels, text='Alavancagem (x)', width=15, bg='black', fg='#F0B90B',
+                               font='Gotham 13 bold')
+        alvo = tk.Label(frame_text_labels, text='Alvo (%)', width=15, bg='black', fg='#F0B90B', font='Gotham 13 bold')
+        stop = tk.Label(frame_text_labels, text='Stop (%)', width=15, bg='black', fg='#F0B90B', font='Gotham 13 bold')
+        frame_text_labels.pack(side=LEFT)
+        colateral.pack()
+        alavancagem.pack()
+        alvo.pack()
+        stop.pack()
+
+    def entry_labels(self):
+        """
+            Entry Labels
+        :return:
+        """
+        frame_entry_labels = tk.Frame(self.window)
+        colateral = tk.Entry(frame_entry_labels,bg='white',font='Gotham 13 ')
+        alavancagem = tk.Entry(frame_entry_labels,bg='white',font='Gotham 13 ')
+        alvo = tk.Entry(frame_entry_labels,bg='white',font='Gotham 13 ')
+        stop = tk.Entry(frame_entry_labels,bg='white',font='Gotham 13 ')
+        frame_entry_labels.pack(side=RIGHT)
+        colateral.pack()
+        alavancagem.pack()
+        alvo.pack()
+        stop.pack()
+
+mtc = MarginTradingCalcGui()
+mtc.text_labels()
+mtc.entry_labels()
+mtc.window.mainloop()
